//
// Copyright 2012 Jim Zhan
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


#import "UIView+SiroccoUI.h"



///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
NI_FIX_CATEGORY_BUG(UIView_SiroccoUI)


@implementation UIView (SiroccoUI)


///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - Size & Positions


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)left {
    return self.frame.origin.x;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setLeft:(CGFloat)left {
    CGRect frame = self.frame;
    frame.origin.x = left;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)top {
    return self.frame.origin.y;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setTop:(CGFloat)top {
    CGRect frame = self.frame;
    frame.origin.y = top;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)right {
    return self.frame.origin.x + self.frame.size.width;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setRight:(CGFloat)right {
    CGRect frame = self.frame;
    frame.origin.x = right - frame.size.width;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)bottom {
    return self.frame.origin.y + self.frame.size.height;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setBottom:(CGFloat)bottom {
    CGRect frame = self.frame;
    frame.origin.y = bottom - frame.size.height;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)width {
    return self.frame.size.width;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setWidth:(CGFloat)width {
    CGRect frame = self.frame;
    frame.size.width = width;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)height {
    return self.frame.size.height;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setHeight:(CGFloat)height {
    CGRect frame = self.frame;
    frame.size.height = height;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGPoint)origin {
    return self.frame.origin;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setOrigin:(CGPoint)origin {
    CGRect frame = self.frame;
    frame.origin  = origin;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGSize)size {
    return self.frame.size;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setSize:(CGSize)size {
    CGRect frame = self.frame;
    frame.size = size;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - Tools


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)addToSuperview {
    if (self.superview) {
        if (NSNotFound == [self.superview.subviews indexOfObject:self]) {
            [self.superview addSubview:self];
        }
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)addSubviewIfNeeded:(UIView *)subview {
    if (NSNotFound == [self.subviews indexOfObject:subview]) {
        [self addSubview:subview];
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)removeAllSubviews {
    for (UIView* subview in self.subviews) {
        [subview removeFromSuperview];
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)showAllSubviews:(BOOL)show {
    for (UIView* subview in self.subviews) {
        [subview setHidden: !show];
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)replaceSubview:(UIView *)subview with:(UIView *)view {
    if (subview != view) {
        [subview removeAllSubviews];
        [subview removeFromSuperview];
        subview = nil;
        subview = view;
        [self addSubview:view];
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (NSInteger)tagForName:(NSString *)name {
    NSString* string = [NSString stringWithFormat:@"%@::%@", self.className, name];
    NSString* hash = [string md5Hash];
    const char* cstring = [hash cStringUsingEncoding:NSUTF8StringEncoding];
    
    NSInteger tag = 0;
    for (int index = 0; index < hash.length; ++index) {
        tag += [[NSNumber numberWithUnsignedChar:cstring[index]] integerValue];
    }

    return tag;
}

@end
